<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1268.v6eb_e2ee1a_85a">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
    <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.6.0">
        <gitLabConnection/>
        <jobCredentialId/>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3606.v0b_d8b_e512dcf">
    <script>pipeline {
    agent {
        docker {
            image &apos;ubuntu&apos;
            args &apos;-u root:sudo -v $HOME/workspace/myproject:/myproject&apos;
        }
    }
    stages {
        stage(&quot;setup_env&quot;) {
            steps {
                sh &apos;bash ./setup_netbox_env.sh&apos;
            }
        }
        stage(&quot;docker_start&quot;) {
            steps {
                sh &apos;docker info&apos;
            }
        }
        stage(&quot;docker-compose_setup&quot;) {
            steps {
                sh &apos;curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose&apos;
                sh &apos;chmod +x /usr/local/bin/docker-compose&apos;
                sh &apos;docker-compose --version&apos;
            }
        }
        stage(&quot;clone_netbox&quot;) {
            steps {
                sh &apos;git -C netbox-docker pull || git clone https://github.com/netbox-community/netbox-docker.git&apos;
                sh &apos;cp netbox-docker/docker-compose.override.yml.example netbox-docker/docker-compose.override.yml&apos;
                sh &apos;yq -i \&apos;.services.netbox.environment.NETBOX_DELETE_LEGACY_DATA = &quot;true&quot;\&apos;  netbox-docker/docker-compose.yml&apos;
                sh &apos;yq -i \&apos;.services.netbox.environment.SKIP_SUPERUSER = &quot;true&quot;\&apos;  netbox-docker/docker-compose.yml&apos;
                sh &apos;yq -i \&apos;.services.netbox.restart = &quot;unless-stopped&quot;\&apos; netbox-docker/docker-compose.override.yml&apos;
                sh &apos;yq -i \&apos;.services.netbox.healthcheck.start_period = &quot;100s&quot;\&apos; netbox-docker/docker-compose.yml&apos;
                sh &apos;yq -i \&apos;.services.netbox-worker.healthcheck.start_period = &quot;40s&quot;\&apos; netbox-docker/docker-compose.yml&apos;
                sh &apos;yq -i \&apos;.services.netbox-housekeeping.healthcheck.start_period = &quot;40s&quot;\&apos; netbox-docker/docker-compose.yml&apos;
                sh &apos;yq -i \&apos;.services.netbox.healthcheck.timeout = &quot;10s&quot;\&apos; netbox-docker/docker-compose.yml&apos;
                sh &apos;yq -i \&apos;.services.netbox-worker.healthcheck.timeout = &quot;10s&quot;\&apos; netbox-docker/docker-compose.yml&apos;
                sh &apos;yq -i \&apos;.services.netbox-housekeeping.healthcheck.timeout = &quot;10s&quot;\&apos; netbox-docker/docker-compose.yml&apos;
            }
        }

        stage(&quot;docker-compose&quot;) {
            steps {
                sh &apos;pwd&apos;
                sh &apos;docker-compose -f netbox-docker/docker-compose.yml pull&apos;
                sh &apos;docker-compose -f netbox-docker/docker-compose.yml up -d&apos;
            }
        }
    }
    post {
        success {
            echo &apos;Do something when it is successful&apos;
        }
        failure {
            echo &apos;Do something when it is failed&apos;
            sh &apos;rm -r netbox-docker&apos;
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
